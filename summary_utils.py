"""
Utilities for crawling results directories,
generating summary files, plots and reports from the data,
and compressing results.

AUTHOR
    Yoshua Wakeham
    y.wakeham@student.unimelb.edu.au
    yoshua.wakeham@petermac.org
"""
from __future__ import print_function
import csv
import pandas as pd
import ConfigParser
import StringIO


class RunSummary(object):
    """
    A summary of a simulation run.

    This class is a straightforward wrapper around
    a dictionary of summary fields. It provides various
    methods for scraping summary data from config files,
    results files etc.

    To add a new field or set of fields to the summary
    files generated by this script, add extra methods or
    method calls to this class.
    """

    __slots__ = ['__fields', '__param_fields', '__result_fields', '__timeseries']

    def __init__(self):
        self.param_fields = {}
        self.result_fields = {}
        self.timeseries = None

    @property
    def param_fields(self):
        return self.__param_fields

    @param_fields.setter
    def param_fields(self, val):
        if not hasattr(self, '__param_fields') and type(val) == dict:
            self.__param_fields = val
        else:
            print("warning: attempting to overwrite RunSummary fields dict.")
            print("         You probably don't want to do this.")

    @property
    def result_fields(self):
        return self.__result_fields

    @result_fields.setter
    def result_fields(self, val):
        if not hasattr(self, '__result_fields') and type(val) == dict:
            self.__result_fields = val
        else:
            print("warning: attempting to overwrite RunSummary fields dict.")
            print("         You probably don't want to do this.")

    @property
    def fields(self):
        f = self.param_fields.copy()
        f.update(self.result_fields)
        return f

    @property
    def timeseries(self):
        return self.__timeseries

    @timeseries.setter
    def timeseries(self, val):
        if val is None or type(val) == pd.core.frame.DataFrame:
            self.__timeseries = val
        else:
            print("Error: RunSummary.timeseries must be a pandas DataFrame")

    def __repr__(self):
        # TODO expand this stub method
        return "RunSummary() at {}".format(id(self))

    def add_param_field(self, field_name, value):
        self.param_fields[field_name] = value

    def add_result_field(self, field_name, value):
        self.result_fields[field_name] = value

    def get_field_names(self):
        """
        Get a sorted list of the field names for this summary.

        Get a list of field names for this summary, sorted
        in lexicographic order. (With the exception of 'param_set'
        and 'run_number', which are shifted to the start of the list.)
        These field names can then be passed to csv.DictWriter
        for writing the header of a CSV file.
        """
        field_names = sorted(self.param_fields.keys() + self.result_fields.keys())

        # make sure that param set and run number are first columns in CSV file
        if 'run_number' in field_names:
            field_names.remove('run_number')
            field_names = ['run_number'] + field_names
        if 'param_set' in field_names:
            field_names.remove('param_set')
            field_names = ['param_set'] + field_names

        return field_names

    def add_results_from_conf(self, fpath):
        """
        Add simulation results from a CSV file.
        """
        self.add_from_csv(fpath, field_type='results')

    def add_params_from_conf(self, fpath):
        """
        Add simulation parameters from a CSV file.
        """
        self.add_from_csv(fpath, field_type='params')

    def add_from_conf(self, fpath, field_type):
        """
        Add summary fields from an initialisation/properties file.

        That is, add fields from a file formatted as a list of

            field = val

        assignments (the spaces around the '=' being optional).
        """
        with open(fpath) as fp:
            conf_str = '[root]\n' + fp.read()

        conf_fp = StringIO.StringIO(conf_str)

        parser = ConfigParser.SafeConfigParser()
        parser.readfp(conf_fp)

        if field_type == 'results':
            for field, val in parser.items('root'):
                self.add_result_field(field, val)
        elif field_type == 'params':
            for field, val in parser.items('root'):
                self.add_param_field(field, val)
        else:
            raise ValueError

    def add_results_from_csv(self, fpath, delim=','):
        """
        Add simulation results from a CSV file.
        """
        self.add_from_csv(fpath, field_type='results', delim=delim)

    def add_params_from_csv(self, fpath, delim=','):
        """
        Add simulation parameters from a CSV file.
        """
        self.add_from_csv(fpath, field_type='params', delim=delim)

    def add_from_csv(self, fpath, field_type, delim=','):
        """
        Add summary fields from a csv file.

        This assumes that every field in the CSV file should
        be stored to the summary. It will also only take values
        from the first row of the file; any later rows will be ignored!
        Also assumes CSV file has a header identifying the fields.
        """
        with open(fpath) as results_f:
            reader = csv.DictReader(results_f, delimiter=delim)
            row = next(reader)
            if field_type == 'results':
                self.result_fields.update(row)
            elif field_type == 'params':
                self.param_fields.update(row)
            else:
                raise ValueError


def write_summaries_to_file(summaries, summary_fpath):
    """
    Write a summary file for an entire group of simulations.
    """
    summ_fields = summaries[0].get_field_names()

    with open(summary_fpath, 'w') as summ_file:
        writer = csv.DictWriter(summ_file, fieldnames=summ_fields)
        writer.writeheader()
        for summary in summaries:
            writer.writerow(summary.fields)
